---
- name: Create nginx directory on host
  tags: nginx
  become: true
  ansible.builtin.file:
    path: /etc/nginx/conf.d
    state: directory
    mode: '755'
    owner: root
    group: root

- name: Copy nginx config to host
  tags: nginx
  become: true
  ansible.builtin.copy:
    content: "client_max_body_size 100m;"
    dest: /etc/nginx/conf.d
    mode: '644'
    owner: root
    group: root

- name: Enable IPv6 for docker daemon
  become: true
  tags: docker
  ansible.builtin.copy:
    content: |
      {
        "log-driver": "journald"
      }
    dest: /etc/docker/daemon.json
    mode: '644'
    owner: root
    group: root

- name: Deploy Nginx Reverse Proxy
  tags: nginx
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  community.docker.docker_container:
    name: nginx-proxy
    image: jwilder/nginx-proxy
    default_host_ip: ""
    published_ports: 80:80,443:443
    volumes:
      - /etc/nginx/conf.d:/etc/nginx/conf.d
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - dhparam:/etc/nginx/dhparam
      - certs:/etc/nginx/certs:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    network_mode: bridge
    restart_policy: unless-stopped
    env:
      ENABLE_IPV6: "true"
      DEFAULT_HOST: "jasonernst.com"

- name: Deploy LetsEncrypt companion to the proxy
  tags: letsencrypt
  vars:
    ansible_python_interpreter: "/usr/bin/env python3-docker"
  community.docker.docker_container:
    name: letsencrypt
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes: certs:/etc/nginx/certs:rw,/var/run/docker.sock:/var/run/docker.sock:ro
    volumes_from: nginx-proxy
    network_mode: bridge
    restart_policy: unless-stopped
    env:
      ENABLE_IPV6: "true"


- name: Create prodcuction /opt/goblog directory on host
  tags: website
  become: true
  ansible.builtin.file:
    path: /opt/goblog/prod
    state: directory
    mode: '755'
    owner: root
    group: root

- name: Create staging /opt/goblog directory on host
  tags: website
  become: true
  ansible.builtin.file:
    path: /opt/goblog/staging
    state: directory
    mode: '755'
    owner: root
    group: root

- name: Copy production db / files to staging on host
  tags: website
  become: true
  ansible.builtin.copy:
    src: /opt/goblog/prod/
    dest: /opt/goblog/staging
    remote_src: true
    mode: '644'
    owner: root
    group: root

- name: Copy .env to prod host
  tags: website
  become: true
  ansible.builtin.copy:
    content: |
      database=sqlite
      sqlite_db=../database.db
      client_id={{ lookup('community.general.onepassword', 'github_auth', field='username', vault='www.jasonernst.com') }}
      client_secret={{ lookup('community.general.onepassword', 'github_auth', field='credential', vault='www.jasonernst.com') }}
    dest: /opt/goblog/prod/.env
    mode: '644'
    owner: root
    group: root

- name: Copy .env to staging host
  tags: website
  become: true
  ansible.builtin.copy:
    content: |
      database=sqlite
      sqlite_db=../database.db
      client_id={{ lookup('community.general.onepassword', 'github_auth', field='username', vault='www.jasonernst.com') }}
      client_secret={{ lookup('community.general.onepassword', 'github_auth', field='credential', vault='www.jasonernst.com') }}
    dest: /opt/goblog/staging/.env
    mode: '644'
    owner: root
    group: root

- name: Deploy www.jasonernst.com
  tags: website
  community.docker.docker_container:
    name: www.jasonernst.com
    image: compscidr/goblog:v0.1.44
    volumes: /opt/goblog/prod/uploads:/go/src/github.com/compscidr/goblog/www/uploads
    mounts:
      - source: /opt/goblog/prod/database.db
        target: /go/src/github.com/compscidr/database.db
        type: bind
      - source: /opt/goblog/prod/.env
        target: /go/src/github.com/compscidr/goblog/.env
        type: bind
    network_mode: bridge
    restart_policy: unless-stopped
    env:
      VIRTUAL_HOST: "www.jasonernst.com,jasonernst.com"
      VIRTUAL_PORT: "7000"
      LETSENCRYPT_HOST: "www.jasonernst.com,jasonernst.com"
      LETSENCRYPT_EMAIL: "ernstjason1@gmail.com"

- name: Deploy staging.jasonernst.com
  tags: website
  community.docker.docker_container:
    name: staging.jasonernst.com
    image: compscidr/goblog:v0.1.44
    volumes: /opt/goblog/staging/uploads:/go/src/github.com/compscidr/goblog/www/uploads
    mounts:
      - source: /opt/goblog/staging/database.db
        target: /go/src/github.com/compscidr/database.db
        type: bind
      - source: /opt/goblog/staging/.env
        target: /go/src/github.com/compscidr/goblog/.env
        type: bind
    network_mode: bridge
    restart_policy: unless-stopped
    env:
      VIRTUAL_HOST: "staging.jasonernst.com"
      VIRTUAL_PORT: "7000"
      LETSENCRYPT_HOST: "staging.jasonernst.com"
      LETSENCRYPT_EMAIL: "ernstjason1@gmail.com"

- name: Deploy mysql db
  tags: db
  community.docker.docker_container:
    name: db
    image: mysql
    env_file: /opt/goblog/prod/.env
    network_mode: bridge
    restart_policy: unless-stopped

# todo: fix this
# - name: Adds a crontab entry to to backup website
#   ansible.builtin.cron:
#     name: "backup www.jasonernst.com"
#     minute: "0"
#     hour: "3"
#     job: "rsync -av --delete /opt/goblog/prod/ ubuntu-server:/storage/backup/www.jasonernst.com/"      
